/*
 * Copyright 2020 - Transmute Industries Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import base64url from 'base64url';

import { UNIVERSAL_WALLET_CONTEXT_URL, placeHolderImage } from '../constants';

import { getCreateOperationForProfile } from './getCreateOperationForProfile';
import { toKeyPair } from './toKeyPair';

import { DidDocument, SidetreeReplaceOptions } from '../types';
import { hashThenEncode } from './sidetreeEncoding';
import { replaceOptionsToDidCore } from './replaceOptionsToDidCore';
export const toDidDocForProfile = async (
  mnemonic: string,
  index: number,
  didMethodName: string,
  profile = 'SVIP',
  options: SidetreeReplaceOptions = {}
): Promise<DidDocument> => {
  if (profile !== 'SVIP') {
    throw new Error('SVIP Profile is only supported profile');
  }
  const signingKeyPair = await toKeyPair(mnemonic, index, 'Ed25519');
  const keyAgreementKeyPair = await toKeyPair(mnemonic, index, 'X25519');

  const createOperation = await getCreateOperationForProfile(
    mnemonic,
    index,
    profile,
    options
  );

  const didUniqueSuffix = hashThenEncode(
    base64url.toBuffer(createOperation.suffix_data)
  );
  const shortFormDid = `did:${didMethodName}:${didUniqueSuffix}`;

  const longFormDid = `${shortFormDid}?-${
    didMethodName.split(':')[0]
  }-initial-state=${createOperation.suffix_data}.${createOperation.delta}`;

  const signingKeyId = '#' + signingKeyPair.id.split('#').pop();
  const keyAgreementKeyId = '#' + keyAgreementKeyPair.id.split('#').pop();

  const didDocumentPartial = replaceOptionsToDidCore(options);

  const didDocument = {
    '@context': [
      'https://www.w3.org/ns/did/v1',
      'https://ns.did.ai/transmute/v1',
      {
        '@base': shortFormDid,
      },
    ],
    id: shortFormDid,
    publicKey: [
      {
        id: signingKeyId,
        type: 'JsonWebKey2020',
        controller: shortFormDid,
        publicKeyJwk: signingKeyPair.publicKeyJwk,
      },
      {
        id: keyAgreementKeyId,
        type: 'JsonWebKey2020',
        controller: shortFormDid,
        publicKeyJwk: keyAgreementKeyPair.publicKeyJwk,
      },
    ],
    authentication: [signingKeyId],
    assertionMethod: [signingKeyId],
    capabilityInvocation: [signingKeyId],
    capabilityDelegation: [signingKeyId],
    keyAgreement: [keyAgreementKeyId],
    ...didDocumentPartial,
  };

  return {
    '@context': [UNIVERSAL_WALLET_CONTEXT_URL],
    id: longFormDid,
    name: 'Sidetree DID',
    image: placeHolderImage,
    description: 'Generated by @sidetree/wallet.',
    tags: [],
    type: 'DID',
    didDocument,
  };
};
